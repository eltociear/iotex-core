// Copyright (c) 2019 IoTeX Foundation
// This source code is provided 'as is' and no warranties are given as to title or non-infringement, merchantability
// or fitness for purpose and, to the extent permitted by law, all liability for your use of the code is disclaimed.
// This source code is governed by Apache License 2.0 that can be found in the LICENSE file.

package state

import (
	"encoding/hex"
	"fmt"
	"math"
	"math/big"
	"testing"

	"github.com/golang/mock/gomock"
	"github.com/iotexproject/go-pkgs/hash"
	"github.com/stretchr/testify/require"
)

func TestNonce(t *testing.T) {
	require := require.New(t)
	t.Run("legacy account type", func(t *testing.T) {
		acct, err := NewAccount(LegacyNonceAccountTypeOption())
		require.NoError(err)
		require.Equal(uint64(1), acct.PendingNonce())
		require.Error(acct.SetPendingNonce(0))
		require.Error(acct.SetPendingNonce(3))
		require.NoError(acct.SetPendingNonce(2))
		require.Equal(uint64(2), acct.PendingNonce())
	})
	t.Run("zero nonce account type", func(t *testing.T) {
		acct, err := NewAccount()
		require.NoError(err)
		require.Equal(uint64(0), acct.PendingNonce())
		require.Error(acct.SetPendingNonce(2))
		require.NoError(acct.SetPendingNonce(1))
		require.Equal(uint64(1), acct.PendingNonce())
	})
	t.Run("legacy fresh account type", func(t *testing.T) {
		acct, err := NewAccount(LegacyNonceAccountTypeOption())
		require.NoError(err)
		require.Equal(uint64(1), acct.PendingNonce())
		require.Error(acct.SetPendingNonce(0))
		require.Error(acct.SetPendingNonce(3))
		require.NoError(acct.SetPendingNonce(1))
		require.Equal(uint64(1), acct.PendingNonce())
	})
}

func TestNonceOverflow(t *testing.T) {
	require := require.New(t)
	t.Run("account nonce uint64 max", func(t *testing.T) {
		acct, err := NewAccount()
		require.NoError(err)
		var target uint64 = math.MaxUint64
		acct.nonce = uint64(target)
		require.ErrorIs(acct.SetPendingNonce(target+1), ErrNonceOverflow)
		require.Equal(target, acct.PendingNonce())
	})
	t.Run("account nonce uint64 max-1", func(t *testing.T) {
		acct, err := NewAccount()
		require.NoError(err)
		var target uint64 = math.MaxUint64 - 1
		acct.nonce = uint64(target)
		require.NoError(acct.SetPendingNonce(target + 1))
		require.Equal(target+1, acct.PendingNonce())
	})
	t.Run("legacy account nonce uint64 max", func(t *testing.T) {
		acct, err := NewAccount(LegacyNonceAccountTypeOption())
		require.NoError(err)
		var target uint64 = math.MaxUint64
		acct.nonce = uint64(target)
		require.ErrorIs(acct.SetPendingNonce(target+2), ErrNonceOverflow)
		require.Equal(target+1, acct.PendingNonce())
	})
	t.Run("legacy account nonce uint64 max-1", func(t *testing.T) {
		acct, err := NewAccount(LegacyNonceAccountTypeOption())
		require.NoError(err)
		var target uint64 = math.MaxUint64 - 1
		acct.nonce = uint64(target)
		require.ErrorIs(acct.SetPendingNonce(target+2), ErrNonceOverflow)
		require.Equal(target+1, acct.PendingNonce())
	})
	t.Run("legacy account nonce uint64 max-2", func(t *testing.T) {
		acct, err := NewAccount(LegacyNonceAccountTypeOption())
		require.NoError(err)
		var target uint64 = math.MaxUint64 - 2
		acct.nonce = uint64(target)
		require.NoError(acct.SetPendingNonce(target + 2))
		require.Equal(target+2, acct.PendingNonce())
	})
}

func TestEncodeDecode(t *testing.T) {
	require := require.New(t)

	for _, test := range []struct {
		accountType int32
		expectedLen int
	}{
		{
			1, 66,
		},
		{
			0, 64,
		},
	} {
		acc := Account{
			accountType: test.accountType,
			Balance:     big.NewInt(20000000),
			nonce:       0x10,
			CodeHash:    []byte("testing codehash"),
		}
		ss, err := acc.Serialize()
		require.NoError(err)
		require.NotEmpty(ss)
		require.Equal(test.expectedLen, len(ss))

		s2 := Account{}
		require.NoError(s2.Deserialize(ss))
		require.Equal(acc.accountType, s2.accountType)
		require.Equal(acc.Balance, s2.Balance)
		require.Equal(acc.nonce, s2.nonce)
		require.Equal(hash.ZeroHash256, s2.Root)
		require.Equal(acc.CodeHash, s2.CodeHash)
	}
}

func TestProto(t *testing.T) {
	require := require.New(t)

	for _, test := range []struct {
		accountType int32
		raw         string
	}{
		{
			0, "1201301a200000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			1, "1201301a2000000000000000000000000000000000000000000000000000000000000000003801",
		},
	} {
		acc := Account{accountType: test.accountType}
		ss, _ := hex.DecodeString(test.raw)
		require.NoError(acc.Deserialize(ss))
		bytes, err := acc.Serialize()
		require.NoError(err)
		require.Equal(test.raw, hex.EncodeToString(bytes))
	}

	acc := Account{}
	for _, v := range []string{
		"08011201301a200000000000000000000000000000000000000000000000000000000000000000",
		"0a1639323533373830353937363530323434373139353838",
		"080f121437353335383137363030303030303030303030301a200000000000000000000000000000000000000000000000000000000000000000",
		"0a173435393937303839313632373038303630353138393932",
		// constant key = 72e48afbc999a7f892ebaf3543446469acbcd1a0
		"0a1b323030303030303030303030303030303030303030303030303030121b323030303030303030303030303030303030303030303030303030",
		"0a1b323030303030303030303030303030303030303030303030303030121b313939393939383430303030303030303030303030303030303030",
		// write at 0
		"0a14313630303030303030303030303030303030303012173132353030303030303030303030303030303030303030186422143830303030303030303030303030303030303030282430b8443855",
		"0a14a241d6457c46cba467dd9e2c67daa8e5854dd7600a14316d2b0de06293df4aab57607f8e4a544c6801750a14e8e9fa415a38d68142ff5cc0c39f7cebf5cc6e870a14340d4996b64284cd547e5ecec208bbb9f5dda7b60a1462f6a122678bc33d779856193c5d0e6f729e95030a14a152c3ef856d1b2b1f8a5bd3f43aa406d7a4a0a70a14c44755de221dabcbb0f1e9503aa193893411765a0a14ab3778171ea0d41599bd00d767b45e85b0b8bc260a14425e784c21e2baa725b47865d82a5a02ad8348400a14e51293f8a8429ae2b12130d4b86f9d13fd950f3d0a146f2b9055273ceae261ead7e28eee4ecafe8822b20a14510cd765c3279e819530d2437227b62171e4707b0a14f9a919a5005366218a99c0959c43cc67f40ffdfb0a14e50c47e7131c86db08985a4178fbe81d038488370a14ec8fd185fe33b5028d17aaba9a19253e204e66f30a143a1bb6510f35edc92b0d230277fb5c75ffebc5190a145b6896777b8812a50e972c51d26908036e513f2d0a14043c7a7525b14c98990dd338bf73651617758d900a145792b9d464d390668dd5be1ba435c0f83cfe4ac50a147329b798991ed8354dee919589400e258fa8b46d0a1463c144292716bf162a961ff5ef62ed379140b9650a14341b94086abb6548329d6d663791280c1a53e6af0a144da14f52d6f9ba90552e9631b151b10ec1424cd60a14a4c22e163c41c71137248043320f0de28d0809ff0a1445fc648e1396834e01120d8a606a482cfaa3f72e0a1499250a2b5b983103556eefa615d90f3e71f83a980a1497520fb26bc19040eb2fe1b0b5c57f90b11611940a1417b72ca7cea28f3ec270ea7b378c3a27196602af0a14c7025b1eff3a4357b072517263b6588d75e3bdb60a14862072cb83f02df15e8c48f77ec7157f0e4eca460a147d88c60b8f3865927c9b0579bb4e5dfaa99ec42b0a143ed99090d6c3692b103f4826af11b60c33368f240a1498aaf9841d89199b544dec360ee57f54ab7d70790a14df82520f329a0c461aec9f8254178efb1bee73bb0a14c39db79dae61437bc5cba320dbf0a8c102e281500a14af655d4a5b5acf162e05812e38160b3bf02e6d15",
		"0a630a29696f317776356d30787965726d7672326e30776a7832636a737177796b3836336472646c357166796e120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f316a6166716c766e746378677970366530757863747433746c6a7a633376797635686734756b68120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f3134616a34366a6a6d747438337674733973796872733973743830637a756d673430636a61736c120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f3132797864776577727937306772396673366670687966616b793963376775726d7a6b38663466120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f316c7835336e66677132646e7a727a3565637a326563733776766c36716c6c306d6b6e39373077120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f31323766746e347279367767786472773468636436676477716c713730756a6b39386476747735120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f31787378356e39346b67327a7636347237746d3876797a396d683836616d66616b396b61397878120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f3167663038736e7070753261327766643530706a6173326a3671326b63786a7a71706833706570120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f31386d76657079786b6364356a6b79706c66716e323779646b7073656e64726579337865326c38120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f3173637338396a757237716b6c7a68357666726d686133633430753879616a6a78366b767a6739120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f31666b733537356b6b6c786166713466776a63636d7a356433706d7135796e786b356836683076120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f31616a38617270303778773673397267683432616635786639386373797565686e6e776c6b3532120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f313867646d7635673078686b756a326364797670383037367577686c3768336765736d7a683875120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f31676837786672736e6a3670357571676a706b397871366a67396e613238616577677037613976120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f31356e707a75393375673872337a6465797370706e7972636475327873737a306c63616d396c39120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f3134766d687339633735723270747864617172746b30647a37736b6374333070786d7436396439120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f3178736465677a723268646a357376356164346e7230796667707364393865343075367376656d120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f313566716176337475676d3936676537616e636b78306b3467756b7a356d346d7166306a707633120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f3178396b6a6b72307176326661376a3474326173386c726a323233787873717434746c37787037120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f316475346571346638386e347779633032366c3367616d6a7765746c677367346a7a376a383834120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f31753578793065636e726a72646b7a79637466716833376c6772357063667a7068677172647774120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f316d3770397972656a6e677879767868766e377039673975776c7664377575616d673877636a64120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f316172356c35733236387274677a73686c746e717638386d7561303675636d3538647836373879120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f317464356676616d6d33716632327235683933676179366767716468397a306564657178363375120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f317a376d6a656637773532386e61736e736166616e307270367975766b76713430356c3672386a120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f316e796a733532366d6e7163737834747761376e70746b67303865636c73773563326479777034120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f3135396676386d75396435646a6b3875327430666c67773479716d74366667393875716a6b6138120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f3171733738356166396b397866337867643676757437756d397a637468747276736e3278617032120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f31633372347468337a726b347568763833613967723467766e337936707a616a366d6338346561120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f3176307135673266387a366c337632356b726c36373763686478376735707774396b7671667063120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f3176746d327a676e383330706e366175633263766e636867776461656661396772347a30733836120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f316377776d303864777639706868337774357673646875396763797077397132736337706c3973120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f317535666638373967673264773976667078723274736d75617a303765327265613667766c3773120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f31306b7976767a753038706a65796c796d7134756d6b6e6a616c32356561337074666b6e727066120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f31637570396b38686c386670343076726a3239657838646a63333436373830646b323233656e64120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f316e7a34306e707161337976656b347a6461736d716165746c326a3468367572656a666b657261120b52b7d2dcc80cd2e40000002229696f3163357a776832347063347a3837747177346d367a3663347935343470777376386e72726d36360a630a29696f316b723863366b72643764687861617177646b72366572716775347a3073637567336472676a61120b2dca6b25e5e65465e141402229696f317877686a74637a6a3376336a7836666c74643568387934377a7261713276786b766c746e72770a630a29696f3166726130667836616b61636e7939617365777437767976676771713472747133657a6e636372120b28a9a0560473c2eb9287562229696f317979637068726e7866776e333263307238657234616e357a766c6e763872776865736c6c6e390a630a29696f3130386837736135736170343465323434687a3634397a796b35793472717a73766e707a786835120b2866bed42bf52c89e1f2d72229696f31396e676175676e6d676373686673647a6b35366836747270396770736b39676b6b6c3068336a0a630a29696f316630726839346d3363746b77657033726c7373777771357678776c6e747834733537346c3371120b26457d3b6c08e0328db4592229696f316e32336a3938397172796e7a66673968357667396c686e7375307a756b376e366b716430646d0a630a29696f313475356436367274343635796b6d377432383437716c6c6a3072656d6c32377133306b723735120b23feabb6e890c2b74c3a102229696f31383376377666746a3365346837367a35663571707377686e6e353733377272776a6b687964730a630a29696f31776c38336e3375703977386e65646633306c6e79787a706c6530677535706d65306479726473120b1ffe82a3b85dd9f1b3520e2229696f31776c38336e3375703977386e65646633306c6e79787a706c6530677535706d653064797264730a630a29696f317364357435647778726b327435307a38796c38366e36687438633939756d74347536726b6e6c120b1ddaeb6d12507045c3777d2229696f317364357435647778726b327435307a38796c38366e36687438633939756d74347536726b6e6c0a630a29696f31346e673377677a737963656b656a77763534756574776b7478753034747a676a377877307063120b1c35bc9b88fc5a471d24062229696f31727061766e7a333672377770397a73346d333371726d6d776b716874707a76303368797239740a630a29696f316e336c6c6d307a7a6c6c6573367076707a75677a616a797a796a65687a747a74786632726666120b1aa9b9e50ab55c814ac03d2229696f31676c6170757872396637377679397673336361307779673976796672657872336861387174330a630a29696f31347271357467366876736d733637357479366d356b65386530687a7a77703732767965796572120b18a55f28d31bde70ff45262229696f31333537653436776b756e6b6e66717a3275386e357675396577647939717163653661713079770a630a29696f3137636d726578747966657534676464776438396735716e636564736e6335353364687a377861120b17e2509addff2b3b9f5d172229696f317737656e68307676383775773972743733327a3038396e7136363532647261646b3330766c750a630a29696f317171617377747537726365766168756370667863307a787830383870796c7774786e6b72726c120b17ae9bb9a585812b30dab52229696f313036366b757334766c79766b306c6a716c3339667a777177306b323268376a38776d6566336e0a630a29696f316c79756b68733733746e776a663036396c7933726570646b796438327071326737793432306c120b146af36158486886f6ac5c2229696f31307867676b6a35647a34306770383463653468786e333239376570726c747973386a706776650a630a29696f3167667139656c32676e677575733634657833687538616a64366534797a6b336639637a357678120b144e204e0ed7cf7da6f56d2229696f31343634797439706d74793634646c756e39356b767576647472326e33776632637834743970320a630a29696f317a34737874656675726b6c6b7972666d6d64746a6d7734683863736e786c7639373437687964120b13312ea860157d3c68445a2229696f31337634706e6a6866687864796e70713075687776326c6d7533613575767774636c6c733633700a630a29696f3177653567716e347865616b3979636e75346c396c76307166713365756170796d6e7a66667836120b12942430d5d3a22938b7ce2229696f3164667634357671397678363975777a3636306e716171743971367076356a32343936647132370a630a29696f31716e6563383061726b3973686a6336757a6b343564686d387335306470633237736a75766572120b113f6f9562c0f3183265bc2229696f31796e3671357a73373934327666776a6436646d7465786a7973646670636a326e32376c6a61720a630a29696f317a793971346d7970336a657a7864737638327a33663836357275616d68716d3761366d676768120b0f88da4f6d75a4e1c153ee2229696f31796a6a71746b747435796835347a63756d3464666a327868347236786174713870386e666c760a630a29696f31307265637a6361656c676c6835786d6b6179363568397677336535647038326538767730727a120b0d247e6788b6f848f01a192229696f316b6e667a71727a776c783963783674327472676370706e3736377670746c6365306d326b6a650a630a29696f316b75677966646b647373376163793079397838666d666a643571797866637965336778743939120b0c907e7b4a09216c2c37c02229696f317036787a796c357a3470357a34333430366c307271797071646b327a67763536776638776a700a630a29696f3137636334663333336832736838326e766b703736766c6b7076356478636d7a33613670666b61120b0c138638f28e6481c877bf2229696f316a6570636536363779667578307a347874396d3674703632667933717330683839716b6864380a630a29696f316574377a6b7a6337366d3974776134676e3578687433757274396d776a3035717664746a3636120b0b2027f3a70370784e64312229696f316673726b707a7274366a75766b7565726d7a366464326e67336130343475646136797775386c0a630a29696f3139356d68366674777a35766e616777393834666a34686a386177747933756532676834353766120b09fde86210731d4bcf7d4f2229696f316c7171686736676532633961307779636b7766647467683239666e75667a7a393578786432330a630a29696f316533773033756c6e727378746832673072677371367634303666686463637367667133687a37120b07eeb9e40789c09627fa102229696f313261796d6667386770326b6a65756777646a6435306c7633763777683233763471676d3378340a630a29696f31327763397261346c613938796179346371646176356d777878757a77707436686b32336e337a120b07b92ccacc4e41e7866f752229696f316d726d34676368686477747034756c7964387971757339733674676e356e79677473776a78780a630a29696f3164646a6c7574746b7a6c6a7166676474637a39657533723373383332756d7937796c78307473120b07b6ccecfa7dc74c4204612229696f3163757561333268757079746e746a766564683965677170726176333439726c64676a6b3275710a630a29696f31337864686739647535366b68756d7a3373673661336d613571356b6a783776646c7834387838120b06dd6a3b14bc3c9c053f262229696f31656e666c6839763468636877776c7277353537683274766a7736727570396d706a72306e63790a630a29696f31337633646877647338326867307563396c347075657230306b3933716167646836326a306d7a120b06a6d4131dba47591c916e2229696f316b6a756c75647475703239336a39326b71686e6e7074676538687067396c657a34306d7963680a630a29696f3178756179657273717434756e366d6763336b6a6166346175386e796b7a343067346138326376120b0376e493ca95b0a994b8662229696f3178756179657273717434756e366d6763336b6a6166346175386e796b7a3430673461383263760a630a29696f313435366b6e65687a6e3971757038756e786c6634713036656d707a386c717874703676357668120b02ea0fd6defcecac5df33f2229696f3179667466367875617232366c7361686572307161373364307a633363736d383834686a7776680a630a29696f3161716633306b717a35727168367a6e38326330306a36383470326832743563673330776d3874120b029bb40e90816bbb9aa98a2229696f31663676636a6b7564786e66647a7634763636736a6c6a7079636833386837333837796e7776770a630a29696f316e7973346832727068766b337067323261373367706d37686b7a6a65746b6530306432776467120b0292013ca4a484f45bb99b2229696f317a7930336b7330687174707177706d677661353666646c6a743374763276616a66656a6e7870",
	} {
		ss, _ := hex.DecodeString(v)
		require.NoError(acc.Deserialize(ss))
		fmt.Printf("account = %+v\n", acc)
	}
}

func TestBalance(t *testing.T) {
	require := require.New(t)
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	state := &Account{Balance: big.NewInt(20)}
	// Add 10 to the balance
	require.NoError(state.AddBalance(big.NewInt(10)))
	// Balance should == 30 now
	require.Equal(0, state.Balance.Cmp(big.NewInt(30)))
	// Sub 40 to the balance
	require.Equal(ErrNotEnoughBalance, state.SubBalance(big.NewInt(40)))

	require.True(state.HasSufficientBalance(big.NewInt(30)))
	require.False(state.HasSufficientBalance(big.NewInt(31)))

	require.Contains(state.AddBalance(big.NewInt(-1)).Error(), ErrInvalidAmount.Error())
	require.Contains(state.SubBalance(big.NewInt(-1)).Error(), ErrInvalidAmount.Error())
	require.Contains(state.AddBalance(nil).Error(), ErrInvalidAmount.Error())
	require.Contains(state.SubBalance(nil).Error(), ErrInvalidAmount.Error())
}

func TestClone(t *testing.T) {
	require := require.New(t)
	ss := &Account{
		nonce:   0x10,
		Balance: big.NewInt(200),
	}
	account := ss.Clone()
	require.Equal(big.NewInt(200), account.Balance)

	require.NoError(account.AddBalance(big.NewInt(100)))
	require.Equal(big.NewInt(200), ss.Balance)
	require.Equal(big.NewInt(200+100), account.Balance)
}

func TestConvertFreshAddress(t *testing.T) {
	// TODO: fix this test @dustinxie
	t.Skip()
	require := require.New(t)

	var (
		s1, _ = NewAccount(LegacyNonceAccountTypeOption())
		s2, _ = NewAccount(LegacyNonceAccountTypeOption())
		s3, _ = NewAccount()
		s4, _ = NewAccount()
	)
	s2.nonce, s4.nonce = 1, 1

	for i, v := range []struct {
		s                    *Account
		accType, cvtType     int32
		first, second, third uint64
	}{
		{s1, 0, 1, 1, 0, 1},
		{s2, 0, 0, 2, 2, 3},
		{s3, 1, 1, 0, 0, 1},
		{s4, 1, 1, 1, 1, 2},
	} {
		require.Equal(v.accType, v.s.accountType)
		require.Equal(v.first, v.s.PendingNonce())
		require.Equal(v.second, v.s.PendingNonceConsideringFreshAccount())
		// trying convert using pending nonce does not take effect
		// require.False(v.s.ConvertFreshAccountToZeroNonceType(v.first))
		require.Equal(v.accType, v.s.accountType)
		// only adjusted nonce can convert legacy fresh address to zero-nonce type
		// require.Equal(v.s.IsLegacyFreshAccount() && v.second == 0, v.s.ConvertFreshAccountToZeroNonceType(v.second))
		require.Equal(v.cvtType, v.s.accountType)
		// after conversion, fresh address is still fresh
		require.Equal(i == 0 || i == 2, v.s.IsNewbieAccount())
		// after conversion, 2 pending nonces become the same
		require.Equal(v.second, v.s.PendingNonce())
		require.Equal(v.second, v.s.PendingNonceConsideringFreshAccount())
		require.NoError(v.s.SetPendingNonce(v.second + 1))
		// for dirty address, 2 pending nonces are the same
		require.Equal(v.third, v.s.PendingNonce())
		require.Equal(v.third, v.s.PendingNonceConsideringFreshAccount())
	}
}
